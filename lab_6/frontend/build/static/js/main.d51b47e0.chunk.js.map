{"version":3,"sources":["components/pages/Home/common/components/Controls/types.ts","constants/actionTypes.ts","constants/API.ts","components/pages/Home/common/utils/adaptRowData/index.ts","store/context/index.ts","services/RequestService/index.ts","components/blocks/Table/component.tsx","components/pages/Home/styles.ts","components/controls/Select/component.tsx","components/controls/Button/component.tsx","components/controls/TextInput/component.tsx","components/pages/Home/common/components/DynamicModal/styles.ts","components/pages/Home/common/components/DynamicModal/component.tsx","components/blocks/CheckedTableRow/utils/getInitialInputCellsState/index.ts","components/pages/Home/common/components/Controls/utils/buildEmptyCellItem/index.ts","store/actions/students/index.ts","services/ResponseStatusService/index.ts","utils/hooks/useToastResponse/index.ts","components/pages/Home/common/components/Controls/component.tsx","components/blocks/CheckedTableRow/styles.ts","components/blocks/CheckedTableRow/component.tsx","components/pages/Home/component.tsx","components/pages/Home/container.tsx","Router.tsx","constants/routes.ts","store/reducers/reducer/reducer.ts","App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["SelectItems","SET_SELECTED_ITEM","SET_SELECTED_ITEM_STATE","ADD_NEW_ITEM","DELETE_ITEM","UPDATE_ITEM","API_ROUTE","adaptRowData","rawData","map","item","id","selected","cells","Object","entries","filter","objectEntry","type","value","StoreContext","React","createContext","selectedItemState","Student","selectedItem","DispatchContext","action","RequestService","get","url","a","fetch","response","json","data","console","error","message","post","body","method","headers","JSON","stringify","status","put","del","Table","children","aria-labelledby","size","aria-label","TableBody","memo","useStyles","makeStyles","container","maxWidth","controls","marginTop","marginBottom","Select","onChange","items","MenuItem","label","Button","onClick","variant","color","TextInput","required","className","TextField","modalContainer","backgroundColor","padding","alignSelf","marginLeft","marginRight","modal","display","justifyContent","width","closeIcon","alignItems","DynamicModal","visibility","inputCellState","onClose","onSaveButtonClick","classes","Modal","open","Container","Grid","justify","xs","IconButton","cell","event","target","getInitialInputCellsState","reduce","accum","buildEmptyCellItem","selectedValue","Faculty","Teacher","Group","addNewItem","payload","ResponseStatusService","handleStatusCode","useToastResponse","addToast","useToasts","statusCode","customStatusObject","statusObject","appearance","Controls","dispatch","useContext","state","useState","setSelectedValue","inputCellsState","setInputCellsState","modalVisibility","setModalVisibility","setCells","invokeToastResponse","useEffect","useCallback","selectableItems","text","updatedState","root","cursor","checkBoxWrap","CheckedTableRow","tableItem","rowOpened","setRowOpened","onDeleteIconClick","stopPropagation","updatedItem","hover","role","aria-checked","tabIndex","TableCell","align","Home","onHeaderCheckBoxClick","onCheckBoxClick","tableData","headerCells","Box","Paper","TableContainer","headCells","HomeContainer","setTableData","getInitialData","checked","updatedTableData","student","find","element","history","createBrowserHistory","Router","exact","path","component","reducerInitialState","reducer","height","toastContainer","zIndex","MyCustomToastContainer","props","App","useReducer","Provider","autoDismissTimeout","autoDismiss","placement","components","ToastContainer","style","fixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d51b47e0.chunk.js","sourcesContent":["export enum SelectItems {\n  Group = 'groups',\n  Student = 'students',\n  Teacher = 'teachers',\n  Faculty = 'faculties',\n}\n","export const SET_SELECTED_ITEM = 'SET_SELECTED_ITEM';\nexport const SET_SELECTED_ITEM_STATE = 'SET_SELECTED_ITEM_STATE';\nexport const ADD_NEW_ITEM = 'ADD_NEW_ITEM';\nexport const DELETE_ITEM = 'DELETE_ITEM';\nexport const UPDATE_ITEM = 'UPDATE_ITEM';\n","export const API_ROUTE = 'http://127.0.0.1:8000/';\n","import { Group, Student } from '@/models';\nimport { Teacher } from '@/models/teacher';\nimport { Faculty } from '@/models/faculty';\nimport { RowType } from '@/components/pages/Home/types';\nimport { ItemType } from '@/shared/types';\n\nexport const adaptRowData: Type = rawData =>\n  // eslint-disable-next-line implicit-arrow-linebreak\n  rawData.map((item: ItemType) => ({\n    id: item.id,\n    selected: false,\n    cells: Object.entries(item)\n      .filter(objectEntry => objectEntry[0] !== 'id')\n      .map(objectEntry => ({ type: objectEntry[0], value: objectEntry[1] })),\n  })) as RowType[];\n\ntype Type = (rawData: Student[] | Teacher[] | Group[] | Faculty[]) => RowType[];\n","import React from 'react';\nimport { Store } from '@/store/context/types';\nimport { Actions } from '@/store/reducers/reducer/types';\nimport { SelectItems } from '@/components/pages/Home/common/components/Controls/types';\n\nexport const StoreContext = React.createContext<Store>({\n  selectedItemState: SelectItems.Student,\n  selectedItem: [],\n});\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const DispatchContext = React.createContext<React.Dispatch<Actions>>((action: Actions) => {});\n","import { API_ROUTE } from '@/constants';\nimport { ItemType } from '@/shared/types';\n\nclass RequestService {\n  public static get = async (url: string) => {\n    try {\n      const response = await fetch(`${API_ROUTE}${url}/`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error(error.message);\n      throw error;\n    }\n  }\n\n  public static post: (url: string, body: any) => Promise<[number, ItemType]>\n    = async (url, body) => {\n      try {\n        const response = await fetch(`${API_ROUTE}${url}/`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(body),\n        });\n        const item: ItemType = await response.json();\n        return [response.status, item];\n      } catch (error) {\n        console.error(error.message);\n        throw error;\n      }\n    }\n\n  public static put: (url: string, body: any) => Promise<[number, ItemType]>\n    = async (url: string, body: any) => {\n      try {\n        const response = await fetch(`${API_ROUTE}${url}/`, {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(body),\n        });\n\n        const item: ItemType = await response.json();\n\n        return [response.status, item];\n      } catch (error) {\n        console.error(error.message);\n        throw error;\n      }\n    }\n\n  public static del = async (url: string) => {\n    try {\n      const response = await fetch(`${API_ROUTE}${url}/`, {\n        method: 'DELETE',\n      });\n\n      return response.status;\n    } catch (error) {\n      console.error(error.message);\n      throw error;\n    }\n  }\n}\n\nexport default RequestService;\n","import React from 'react';\nimport MaterialTable from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\n// import TableHeader from '@/components/blocks/TableHeader';\nimport { Props } from './types';\n\nconst Table = ({ children }: Props) => (\n  <MaterialTable\n    aria-labelledby=\"tableTitle\"\n    size=\"medium\"\n    aria-label=\"enhanced table\"\n  >\n    {/* {headCells && ( */}\n    {/*  <TableHeader */}\n    {/*    onCheckBoxClick={onHeaderCheckBoxClick} */}\n    {/*    headCells={headCells} /> */}\n    {/* )} */}\n    <TableBody>{children}</TableBody>\n  </MaterialTable>\n);\n\nexport default React.memo(Table);\n","import { makeStyles } from '@material-ui/core';\n\nexport const useStyles = makeStyles({\n  container: {\n    maxWidth: '1200px',\n  },\n  controls: {\n    marginTop: '20px',\n    marginBottom: '20px',\n  },\n});\n","import React from 'react';\nimport { MenuItem } from '@material-ui/core';\nimport MaterialSelect from '@material-ui/core/Select';\nimport { Props } from './types';\n\nconst Select = ({ value, onChange, items }: Props) => (\n  <MaterialSelect\n    value={value}\n    onChange={onChange}\n  >\n    {items.map(item => (\n      <MenuItem key={item.value} value={item.value}>{item.label}</MenuItem>\n    ))}\n  </MaterialSelect>\n);\n\nexport default React.memo(Select);\n","import React from 'react';\nimport MaterialButton from '@material-ui/core/Button';\nimport { Props } from './types';\n\nconst Button = ({ onClick, label }: Props) => (\n  <MaterialButton onClick={onClick} variant=\"contained\" color=\"primary\">\n    {label}\n  </MaterialButton>\n);\n\nexport default React.memo(Button);\n","import React from 'react';\nimport { TextField } from '@material-ui/core';\nimport { Props } from './types';\n\nconst TextInput = ({\n  label, value, onChange, required = false, className,\n}: Props) => (\n  <TextField\n    label={label}\n    className={className}\n    value={value}\n    onChange={onChange}\n    variant=\"outlined\"\n    required={required} />\n);\n\nexport default React.memo(TextInput);\n","import { makeStyles } from '@material-ui/core';\n\nexport const useStyles = makeStyles({\n  modalContainer: {\n    maxWidth: 700,\n    backgroundColor: 'white',\n    padding: 30,\n    alignSelf: 'center',\n    marginLeft: 20,\n    marginRight: 20,\n  },\n  modal: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  item: {\n    width: '100%',\n    marginTop: 20,\n    marginBottom: 20,\n  },\n  closeIcon: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    alignItems: 'flex-end',\n  },\n});\n","import React from 'react';\nimport {\n  Container, Grid, IconButton, Modal,\n} from '@material-ui/core';\nimport TextInput from '@/components/controls/TextInput/component';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Button from '@/components/controls/Button';\nimport { Props } from './types';\nimport { useStyles } from './styles';\n\nconst DynamicModal = ({\n  visibility,\n  cells,\n  onChange,\n  inputCellState,\n  onClose,\n  onSaveButtonClick,\n}: Props) => {\n  const classes = useStyles();\n\n  return (\n    <Modal open={visibility} className={classes.modal}>\n      <Container className={classes.modalContainer}>\n        <Grid container justify=\"center\" alignItems=\"center\">\n          <Grid xs={12} item className={classes.closeIcon}>\n            <IconButton onClick={onClose}>\n              <CloseIcon />\n            </IconButton>\n          </Grid>\n          {cells.map(cell => (\n            <Grid\n              key={cell.type}\n              xs={12}\n              item\n            >\n              <TextInput\n                className={classes.item}\n                label={cell.type}\n                value={inputCellState[cell.type]}\n                onChange={event => onChange(cell.type, event.target.value)} />\n            </Grid>\n          ))}\n          <Grid item xs={12}>\n            <Button label=\"Сохранить\" onClick={() => onSaveButtonClick(inputCellState)} />\n          </Grid>\n        </Grid>\n      </Container>\n    </Modal>\n  );\n};\n\nexport default React.memo(DynamicModal);\n","import { Cell } from '@/components/pages/Home/types';\n\nexport type InputCellsStateType = { [key: string]: string };\n\nexport const getInitialInputCellsState = (cells: Cell[]) => {\n  const initialState: InputCellsStateType = cells.reduce((accum: InputCellsStateType, cell) => {\n    // eslint-disable-next-line no-param-reassign\n    accum[cell.type] = cell.value;\n\n    return accum;\n  }, {});\n\n  return initialState;\n};\n","import { SelectItems } from '@/components/pages/Home/common/components/Controls/types';\nimport { Cell } from '@/components/pages/Home/types';\n\ntype buildEmptyCellItemType = (selectedValue: SelectItems) => Cell[];\n\nexport const buildEmptyCellItem: buildEmptyCellItemType = (selectedValue: SelectItems) => {\n  switch (selectedValue) {\n    case SelectItems.Faculty:\n      return [{ type: 'name', value: '' }];\n    case SelectItems.Student:\n      return [\n        { type: 'name', value: '' },\n        { type: 'email', value: '' },\n        { type: 'phone', value: '' },\n        { type: 'group', value: '' },\n      ];\n    case SelectItems.Teacher:\n      return [\n        { type: 'name', value: '' },\n        { type: 'email', value: '' },\n        { type: 'phone', value: '' },\n        { type: 'group', value: '' },\n        { type: 'subject', value: '' },\n      ];\n    case SelectItems.Group:\n      return [{ type: 'number', value: '' }, { type: 'faculty', value: '' }];\n    default:\n      return [{ type: 'name', value: '' }];\n  }\n};\n","import {\n  ADD_NEW_ITEM, DELETE_ITEM, SET_SELECTED_ITEM, SET_SELECTED_ITEM_STATE, UPDATE_ITEM,\n} from '@/constants';\nimport {\n  AddNewItemType, DeleteItemType,\n  SetSelectedItemStateType,\n  SetSelectedItemType, UpdateItemType,\n} from '@/store/actions/students/types';\n\nexport const setSelectedItem: SetSelectedItemType = selectedItem => ({\n  type: SET_SELECTED_ITEM,\n  payload: {\n    selectedItem,\n  },\n});\n\nexport const setSelectedItemState: SetSelectedItemStateType = selectedItemState => ({\n  type: SET_SELECTED_ITEM_STATE,\n  payload: {\n    selectedItemState,\n  },\n});\n\nexport const addNewItem: AddNewItemType = item => ({\n  type: ADD_NEW_ITEM,\n  payload: {\n    item,\n  },\n});\n\nexport const deleteItem: DeleteItemType = (id: number) => ({\n  type: DELETE_ITEM,\n  payload: {\n    id,\n  },\n});\n\nexport const updateItem: UpdateItemType = item => ({\n  type: UPDATE_ITEM,\n  payload: {\n    item,\n  },\n});\n","import { ResponseStatus } from '@/services/ResponseStatusService/types';\n\nclass ResponseStatusService {\n  public static handleStatusCode: (status: number) => ResponseStatus\n  = (status: number) => {\n    switch (status) {\n      case 200:\n        return { type: 'success', message: 'Created' };\n      case 201:\n        return { type: 'success', message: 'Success' };\n      case 204:\n        return { type: 'success', message: 'Success' };\n      case 404:\n        return { type: 'error', message: 'Error 404: Not found' };\n      case 400:\n        return { type: 'error', message: 'Error 400: Bad request' };\n      default:\n        return { type: 'warning', message: 'Unknown status code' };\n    }\n  }\n}\n\nexport default ResponseStatusService;\n","import { useToasts } from 'react-toast-notifications';\nimport ResponseStatusService from '@/services/ResponseStatusService';\nimport { ResponseStatus } from '@/services/ResponseStatusService/types';\n\nexport const useToastResponse = () => {\n  const { addToast } = useToasts();\n\n  return ({ statusCode, customStatusObject }: { statusCode?: number; customStatusObject?: ResponseStatus }) => {\n    if (statusCode) {\n      const statusObject = ResponseStatusService.handleStatusCode(statusCode);\n      addToast(statusObject.message, { appearance: statusObject.type });\n    }\n\n    if (customStatusObject) {\n      addToast(customStatusObject.message, { appearance: customStatusObject.type });\n    }\n  };\n};\n","import React, {\n  ChangeEvent, useCallback, useContext, useEffect, useState,\n} from 'react';\nimport { Grid } from '@material-ui/core';\nimport Select from '@/components/controls/Select';\nimport Button from '@/components/controls/Button';\nimport DynamicModal from '@/components/pages/Home/common/components/DynamicModal';\nimport {\n  getInitialInputCellsState,\n  InputCellsStateType,\n} from '@/components/blocks/CheckedTableRow/utils/getInitialInputCellsState';\nimport { buildEmptyCellItem } from '@/components/pages/Home/common/components/Controls/utils/buildEmptyCellItem';\nimport RequestService from '@/services/RequestService';\nimport { DispatchContext, StoreContext } from '@/store/context';\nimport { addNewItem, setSelectedItem, setSelectedItemState } from '@/store/actions/students';\nimport { useToastResponse } from '@/utils/hooks/useToastResponse';\nimport ResponseStatusService from '@/services/ResponseStatusService';\nimport { SelectItems } from './types';\n\nconst Controls = () => {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StoreContext);\n  const [selectedValue, setSelectedValue] = useState<SelectItems>(SelectItems.Student);\n  const [inputCellsState, setInputCellsState] = useState(getInitialInputCellsState(buildEmptyCellItem(selectedValue)));\n  const [modalVisibility, setModalVisibility] = useState(false);\n  const [cells, setCells] = useState(buildEmptyCellItem(selectedValue));\n  const invokeToastResponse = useToastResponse();\n\n  useEffect(() => {\n    setInputCellsState(getInitialInputCellsState(buildEmptyCellItem(selectedValue)));\n    setCells(buildEmptyCellItem(selectedValue));\n  }, [selectedValue]);\n\n  const onSaveButtonClick = useCallback(async (inputCellState: InputCellsStateType) => {\n    try {\n      const [statusCode, item] = await RequestService.post(state.selectedItemState, inputCellState);\n      invokeToastResponse({ statusCode });\n      if (ResponseStatusService.handleStatusCode(statusCode).type === 'success') {\n        dispatch(addNewItem(item));\n      }\n    } catch (error) {\n      invokeToastResponse({ customStatusObject: { type: 'error', message: error.message } });\n    }\n  }, [state.selectedItemState]);\n\n  const onButtonClick = () => {\n    setModalVisibility(true);\n  };\n\n  const onChangeInput = (type: string, text: string) => {\n    const updatedState = {\n      ...inputCellsState,\n      [type]: text,\n    };\n    setInputCellsState(updatedState);\n  };\n\n  const onCloseModal = () => {\n    setModalVisibility(false);\n  };\n\n  const onChange = useCallback(async (event: ChangeEvent<{ value: SelectItems }>) => {\n    setSelectedValue(event.target.value as SelectItems);\n\n    const data = await RequestService.get(event.target.value);\n    dispatch(setSelectedItem(data));\n    dispatch(setSelectedItemState(event.target.value));\n  }, []);\n\n  const selectableItems = [{\n    label: 'Группы',\n    value: SelectItems.Group,\n  },\n  {\n    label: 'Студенты',\n    value: SelectItems.Student,\n  },\n  {\n    label: 'Факультет',\n    value: SelectItems.Faculty,\n  },\n  {\n    label: 'Преподаватели',\n    value: SelectItems.Teacher,\n  },\n  ];\n  return (\n    <>\n      <Grid container justify=\"space-between\" alignItems=\"center\">\n        <Grid item>\n          <Select\n            value={selectedValue}\n            items={selectableItems}\n            onChange={onChange} />\n        </Grid>\n        <Grid item>\n          <Button onClick={onButtonClick} label=\"Добавить\" />\n        </Grid>\n      </Grid>\n      <DynamicModal\n        visibility={modalVisibility}\n        cells={cells}\n        onChange={onChangeInput}\n        inputCellState={inputCellsState}\n        onClose={onCloseModal}\n        onSaveButtonClick={onSaveButtonClick} />\n    </>\n  );\n};\n\nexport default React.memo(Controls);\n","import { makeStyles } from '@material-ui/core';\n\nexport const useStyles = makeStyles({\n  root: {\n    cursor: 'pointer',\n  },\n  checkBoxWrap: {\n    width: 80,\n  },\n});\n","import React, {\n  MouseEvent, useCallback, useContext, useState,\n} from 'react';\nimport MaterialTableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport {\n  Grid, IconButton,\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {\n  getInitialInputCellsState,\n  InputCellsStateType,\n} from '@/components/blocks/CheckedTableRow/utils/getInitialInputCellsState';\nimport DynamicModal from '@/components/pages/Home/common/components/DynamicModal';\nimport RequestService from '@/services/RequestService';\nimport { DispatchContext, StoreContext } from '@/store/context';\nimport { useToastResponse } from '@/utils/hooks/useToastResponse';\nimport ResponseStatusService from '@/services/ResponseStatusService';\nimport { deleteItem, updateItem } from '@/store/actions/students';\nimport { useStyles } from './styles';\nimport { Props } from './types';\n\nconst CheckedTableRow = ({ tableItem }: Props) => {\n  const state = useContext(StoreContext);\n  const dispatch = useContext(DispatchContext);\n  const classes = useStyles();\n  const [rowOpened, setRowOpened] = useState(false);\n  const [inputCellsState, setInputCellsState] = useState(getInitialInputCellsState(tableItem.cells));\n  const invokeToastResponse = useToastResponse();\n\n  const onDeleteIconClick = async (event: MouseEvent<HTMLButtonElement>) => {\n    event.stopPropagation();\n    try {\n      const statusCode = await RequestService.del(`${state.selectedItemState}/${tableItem.id}`);\n      invokeToastResponse({ statusCode });\n      if (ResponseStatusService.handleStatusCode(statusCode).type === 'success') {\n        dispatch(deleteItem(tableItem.id));\n      }\n    } catch (error) {\n      invokeToastResponse({ customStatusObject: { type: 'error', message: error.message } });\n    }\n  };\n\n  const onSaveButtonClick = useCallback(async (inputCellState: InputCellsStateType) => {\n    try {\n      const [statusCode, updatedItem] = await RequestService.put(`${state.selectedItemState}/${tableItem.id}`, inputCellState);\n      invokeToastResponse({ statusCode });\n      if (ResponseStatusService.handleStatusCode(statusCode).type === 'success') {\n        dispatch(updateItem(updatedItem));\n      }\n    } catch (error) {\n      invokeToastResponse({ customStatusObject: { type: 'error', message: error.message } });\n    }\n  }, [state.selectedItemState, tableItem.id]);\n\n  const onChangeInput = (type: string, value: string) => {\n    const updatedState = {\n      ...inputCellsState,\n      [type]: value,\n    };\n    setInputCellsState(updatedState);\n  };\n\n  // const onCheckBoxPress = (event: MouseEvent) => {\n  //   event.stopPropagation();\n  //   onCheckBoxClick();\n  // };\n\n  const onCloseModal = () => {\n    setRowOpened(false);\n  };\n\n  const openRowDetails = () => {\n    setRowOpened(!rowOpened);\n  };\n\n  return (\n    <>\n      <MaterialTableRow\n        className={classes.root}\n        onClick={openRowDetails}\n        hover\n        role=\"checkbox\"\n        aria-checked={false}\n        tabIndex={-1}\n      >\n        <TableCell padding=\"checkbox\">\n          <Grid\n            container\n            justify=\"center\"\n            alignItems=\"center\"\n            className={classes.checkBoxWrap}\n          >\n            <Grid item xs={6}>\n              <IconButton onClick={onDeleteIconClick} aria-label=\"delete\">\n                <DeleteIcon />\n              </IconButton>\n            </Grid>\n          </Grid>\n        </TableCell>\n        {tableItem.cells.map(cell => (\n          <TableCell key={cell.type} align=\"center\">{cell.value}</TableCell>\n        ))}\n      </MaterialTableRow>\n      <DynamicModal\n        onClose={onCloseModal}\n        visibility={rowOpened}\n        cells={tableItem.cells}\n        onChange={onChangeInput}\n        onSaveButtonClick={onSaveButtonClick}\n        inputCellState={inputCellsState} />\n    </>\n  );\n};\n\nexport default React.memo(CheckedTableRow);\n","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@/components/blocks/Table';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport { useStyles } from '@/components/pages/Home/styles';\nimport { Box } from '@material-ui/core';\nimport Controls from '@/components/pages/Home/common/components/Controls';\nimport CheckedTableRow from '@/components/blocks/CheckedTableRow/component';\nimport { Props } from './types';\n\nconst Home = ({\n  onHeaderCheckBoxClick, onCheckBoxClick, tableData, headerCells,\n}: Props) => {\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.container}>\n      <Box className={classes.controls}>\n        <Controls />\n      </Box>\n      <Paper>\n        <TableContainer>\n          <Table\n            headCells={headerCells}\n            onHeaderCheckBoxClick={onHeaderCheckBoxClick}\n          >\n            {tableData.map(tableItem => (\n              <CheckedTableRow\n                key={tableItem.id}\n                selected={tableItem.selected}\n                onCheckBoxClick={() => onCheckBoxClick(tableItem)}\n                tableItem={tableItem} />\n            ))}\n          </Table>\n        </TableContainer>\n      </Paper>\n    </Box>\n  );\n};\n\nexport default React.memo(Home);\n","import React, {\n  useCallback, useContext, useEffect, useState,\n} from 'react';\nimport { RowType } from '@/components/pages/Home/types';\nimport { adaptRowData } from '@/components/pages/Home/common/utils/adaptRowData';\nimport { StoreContext } from '@/store/context';\n// import { getDefaultData } from '@/components/pages/Home/common/utils/getDefaultData';\nimport RequestService from '@/services/RequestService';\nimport Home from './component';\n\nconst HomeContainer = () => {\n  const state = useContext(StoreContext);\n  const [tableData, setTableData] = useState<RowType[]>(adaptRowData(state.selectedItem));\n\n  useEffect(() => {\n    const getInitialData = async () => {\n      await RequestService.get(state.selectedItemState);\n    };\n\n    getInitialData();\n  }, []);\n\n  useEffect(() => {\n    setTableData(adaptRowData(state.selectedItem));\n  }, [state.selectedItem]);\n\n  const onHeaderCheckBoxClick = useCallback((checked: boolean) => {\n    const updatedTableData = tableData.map(student => ({\n      ...student,\n      selected: checked,\n    }));\n\n    setTableData(updatedTableData as RowType[]);\n  }, [tableData]);\n\n  const onCheckBoxClick = useCallback((item: RowType) => {\n    const selectedItem = tableData.find(element => element.id === item.id);\n\n    if (!selectedItem) {\n      return;\n    }\n\n    const updatedTableData = tableData.map(tableItem => {\n      if (tableItem.id === item.id) {\n        const updatedTableItem = {\n          ...tableItem,\n          selected: !tableItem.selected,\n        };\n        return updatedTableItem;\n      }\n      return tableItem;\n    });\n\n    setTableData(updatedTableData as RowType[]);\n  }, [tableData]);\n\n  return (\n    <Home\n      onHeaderCheckBoxClick={onHeaderCheckBoxClick}\n      onCheckBoxClick={onCheckBoxClick}\n      headerCells={[]}\n      tableData={tableData} />\n  );\n};\n\nexport default HomeContainer;\n","import React from 'react';\nimport { Router as ReactRouter, Switch, Route } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport { HOME_PAGE } from '@/constants';\nimport Home from '@/components/pages/Home';\n\nexport const history = createBrowserHistory();\n\nconst Router = () => (\n  <ReactRouter history={history}>\n    <Switch>\n      <Route exact path={HOME_PAGE} component={Home} />\n    </Switch>\n  </ReactRouter>\n);\n\nexport default Router;\n","export const HOME_PAGE = '/';\n","import {\n  ADD_NEW_ITEM,\n  DELETE_ITEM,\n  SET_SELECTED_ITEM,\n  SET_SELECTED_ITEM_STATE,\n  UPDATE_ITEM,\n} from '@/constants';\nimport { Store } from '@/store/context/types';\nimport { SelectItems } from '@/components/pages/Home/common/components/Controls/types';\nimport { Actions } from './types';\n\nexport const reducerInitialState: Store = {\n  selectedItemState: SelectItems.Student,\n  selectedItem: [],\n};\n\nexport const reducer: (state: Store, action: Actions) => Store = (state: Store, action: Actions) => {\n  switch (action.type) {\n    case SET_SELECTED_ITEM:\n      return {\n        ...state,\n        selectedItem: action.payload.selectedItem,\n      };\n    case SET_SELECTED_ITEM_STATE:\n      return {\n        ...state,\n        selectedItemState: action.payload.selectedItemState,\n      };\n    case ADD_NEW_ITEM:\n      return {\n        ...state,\n        selectedItem: [...state.selectedItem, action.payload.item],\n      };\n    case DELETE_ITEM:\n      return {\n        ...state,\n        selectedItem: state.selectedItem.filter(item => item.id !== action.payload.id),\n      };\n    case UPDATE_ITEM:\n      return {\n        ...state,\n        selectedItem: state.selectedItem.map(item => (item.id === action.payload.item.id ? action.payload.item : item)),\n      };\n    default:\n      return state;\n  }\n};\n","import React, { useReducer } from 'react';\nimport Router from '@/Router';\nimport { Container, makeStyles } from '@material-ui/core';\nimport { StoreContext, DispatchContext } from '@/store/context';\nimport { reducer, reducerInitialState } from '@/store/reducers/reducer/reducer';\nimport {\n  DefaultToastContainer,\n  ToastProvider,\n} from 'react-toast-notifications';\n\nconst useStyles = makeStyles({\n  root: {\n    height: '98vh',\n  },\n  toastContainer: {\n    zIndex: 9999,\n  },\n});\n\nconst MyCustomToastContainer = (props: any) => (\n  <DefaultToastContainer {...props} />\n);\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, reducerInitialState);\n  const classes = useStyles();\n\n  return (\n    <DispatchContext.Provider value={dispatch}>\n      <StoreContext.Provider value={state}>\n        <ToastProvider\n          autoDismissTimeout={2000}\n          autoDismiss placement=\"bottom-right\"\n          components={{ ToastContainer: (props: any) => <MyCustomToastContainer {...props} style={{ zIndex: 9999 }} /> }}\n        >\n          <Container className={classes.root} fixed>\n            <Router />\n          </Container>\n        </ToastProvider>\n      </StoreContext.Provider>\n    </DispatchContext.Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n window.location.hostname === 'localhost' ||\n   // [::1] is the IPv6 localhost address.\n   window.location.hostname === '[::1]' ||\n   // 127.0.0.0/8 are considered localhost for IPv4.\n   window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n onSuccess?: (registration: ServiceWorkerRegistration) => void;\n onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n   // The URL constructor is available in all browsers that support SW.\n   const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n   if (publicUrl.origin !== window.location.origin) {\n     // Our service worker won't work if PUBLIC_URL is on a different origin\n     // from what our page is served on. This might happen if a CDN is used to\n     // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n     return;\n   }\n\n   window.addEventListener('load', () => {\n     const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n     if (isLocalhost) {\n       // This is running on localhost. Let's check if a service worker still exists or not.\n       checkValidServiceWorker(swUrl, config);\n\n       // Add some additional logging to localhost, pointing developers to the\n       // service worker/PWA documentation.\n       navigator.serviceWorker.ready.then(() => {\n         console.log(\n           'This web app is being served cache-first by a service ' +\n             'worker. To learn more, visit https://cra.link/PWA'\n         );\n       });\n     } else {\n       // Is not localhost. Just register service worker\n       registerValidSW(swUrl, config);\n     }\n   });\n }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n navigator.serviceWorker\n   .register(swUrl)\n   .then((registration) => {\n     registration.onupdatefound = () => {\n       const installingWorker = registration.installing;\n       if (installingWorker == null) {\n         return;\n       }\n       installingWorker.onstatechange = () => {\n         if (installingWorker.state === 'installed') {\n           if (navigator.serviceWorker.controller) {\n             // At this point, the updated precached content has been fetched,\n             // but the previous service worker will still serve the older\n             // content until all client tabs are closed.\n             console.log(\n               'New content is available and will be used when all ' +\n                 'tabs for this page are closed. See https://cra.link/PWA.'\n             );\n\n             // Execute callback\n             if (config && config.onUpdate) {\n               config.onUpdate(registration);\n             }\n           } else {\n             // At this point, everything has been precached.\n             // It's the perfect time to display a\n             // \"Content is cached for offline use.\" message.\n             console.log('Content is cached for offline use.');\n\n             // Execute callback\n             if (config && config.onSuccess) {\n               config.onSuccess(registration);\n             }\n           }\n         }\n       };\n     };\n   })\n   .catch((error) => {\n     console.error('Error during service worker registration:', error);\n   });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n // Check if the service worker can be found. If it can't reload the page.\n fetch(swUrl, {\n   headers: { 'Service-Worker': 'script' },\n })\n   .then((response) => {\n     // Ensure service worker exists, and that we really are getting a JS file.\n     const contentType = response.headers.get('content-type');\n     if (\n       response.status === 404 ||\n       (contentType != null && contentType.indexOf('javascript') === -1)\n     ) {\n       // No service worker found. Probably a different app. Reload the page.\n       navigator.serviceWorker.ready.then((registration) => {\n         registration.unregister().then(() => {\n           window.location.reload();\n         });\n       });\n     } else {\n       // Service worker found. Proceed as normal.\n       registerValidSW(swUrl, config);\n     }\n   })\n   .catch(() => {\n     console.log('No internet connection found. App is running in offline mode.');\n   });\n}\n\nexport function unregister() {\n if ('serviceWorker' in navigator) {\n   navigator.serviceWorker.ready\n     .then((registration) => {\n       registration.unregister();\n     })\n     .catch((error) => {\n       console.error(error.message);\n     });\n }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}